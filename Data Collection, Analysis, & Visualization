import json
record = []
for line in open('20220626', 'r'):
    record.append(json.loads(line))
    
----------------------------------------------------------------------------------------------------------------------------------------------   
    
hit_level_list=[]
Note_Number_list=[]
MusicScene_Direction_list=[]
for i in range(len(record)):
    if record[i]['name']=='Note Hit':
        custom_parameters=record[i]['custom_params']
        custom_parameters.items()
        list_total = list(custom_parameters.items())
        list_key =list(custom_parameters.keys())
        list_value=list(custom_parameters.values())
#         print(list_value)
        hit_level_list.append(list_value[0])
        Note_Number_list.append(list_value[1])
        for i in list_value:
            if i=='Never_Gonna_Give_You_Up.mid':
                MusicScene_Direction_list.append(list_value[1:4])

# MusicScene_Direction_list

--------------------------------------------------------------------------------------------------------------------------------------------------

# create a combined dataframe with a list of Note Number, MusicScene, and Direction.
import pandas as pd
df = pd.DataFrame (MusicScene_Direction_list, columns = ['Note Number', 'MusicScene','Direction'])
# print (df)

---------------------------------------------------------------------------------------------------------------------------------------------------

# create a combined dataframe with a list of Hit Level and Note Number.
import pandas as pd

zipped = list(zip(hit_level_list,Note_Number_list))
df_2 = pd.DataFrame(zipped, columns=['Hit Level', 'Note Number'])
with pd.option_context('display.max_rows', None,
                       'display.max_columns', None,
                       'display.precision', 3,
                       ):
    print(df_2)

#Merge Two Dataframe into One
result = pd.merge(df_2,
                 df[['Note Number', 'MusicScene','Direction']],
                 on='Note Number')
with pd.option_context('display.max_rows', None,
                       'display.max_columns', None,
                       'display.precision', 3,
                       ):
    print(result)
    
    
Hit_Level_Frequency = result['Hit Level'].value_counts()
print(Hit_Level_Frequency)

-----------------------------------------------------------------------------------------------------------------------------------------------

Note_Number_Frequency = result['Note Number'].value_counts()
print(Note_Number_Frequency)
Max_Note_Number = Note_Number_Frequency.max()
Min_Note_Number=Note_Number_Frequency.min()
print(Max_Note_Number)
print(Min_Note_Number)

------------------------------------------------------------------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

_order = Note_Number_Frequency.head(15).index
plt.figure(figsize=(9, 5))
sns.countplot(data=result, y='Note Number', order=_order)
plt.title('Top 15 Note Number with the Highest Frequency', fontsize=14.5, fontname='Comic Sans MS')
plt.xlabel('Occurences', fontsize=14.5,fontname='Comic Sans MS')
plt.ylabel('Note Number', fontsize=14.5,fontname='Comic Sans MS');
-----------------------------------------------------------------------------------------------------------------------------------------------
Direction_Frequency= result['Direction'].value_counts()
print(Direction_Frequency)
Max_Direction_Frequency = Direction_Frequency.max()
Min_Direction_Frequency = Direction_Frequency.min()
print(f'The most frequent applied direction is {Max_Direction_Frequency}')
print(f'The least frequent applied direction is {Min_Direction_Frequency}')
---------------------------------------------------------------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
# #visualization: Plot a dataframe to a bar plot.

# create dataset
Direction_= [105, 95, 33]
bars = ('Up', 'Right', 'Left')
x_pos = np.arange(len(bars))
 
# Create bars and choose color
plt.bar(x_pos,width=0.4,height=Direction_, color = 'cornflowerblue')
 
# Add title and axis names
plt.title('Frequency of Hit Direction', fontsize=15, fontname='Comic Sans MS')
plt.xlabel('Direction', fontsize=15,fontname='Comic Sans MS')
plt.ylabel('Occurences', fontsize=15,fontname='Comic Sans MS')


# Create names on the x axis
plt.xticks(x_pos, bars)

plt.ylim(top = max(Direction_))
# Show graph
plt.show()
----------------------------------------------------------------------------------------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt

# create dataset
Hit_Level_= [139, 78, 10, 6]
bars = ('Good', 'Perfect', 'Bad','Invalid')
x_pos = np.arange(len(bars))
 
# Create bars and choose color
plt.bar(x_pos,width=0.5,height=Hit_Level_, color = 'yellowgreen')
 
# Add title and axis names
plt.title('Frequency of Hit Level', fontsize=15, fontname='Comic Sans MS')
plt.xlabel('Hit Level', fontsize=15,fontname='Comic Sans MS')
plt.ylabel('Occurences', fontsize=15,fontname='Comic Sans MS')


# Create names on the x axis
plt.xticks(x_pos, bars)

plt.ylim(top = max(Direction_))
# Show graph
plt.show()
 




 
